Receiving_TAT Process 관련 프롬프트
파일 첨부와 같이 사용해야함
<context>
이 프로젝트는 Dell의 리포트를 자동으로 다운로드하고 처리하여 데이터베이스에 저장하는 자동화 시스템입니다. 주요 구성 요소와 프로세스는 다음과 같습니다:

구성 요소:

config.py: 설정 정보 저장
web_crawler.py: Selenium을 사용한 웹 크롤링 기능
file_handler.py: 파일 다운로드 및 처리
data_processor.py: pandas를 사용한 데이터 처리
database.py: MySQL 데이터베이스 작업
main.py: 전체 프로세스 조정


주요 프로세스:
a) 초기화 및 설정
b) 사용자로부터 날짜 범위 입력 받음
c) 웹 크롤링으로 리포트 다운로드
d) 다운로드된 파일 처리
e) 데이터 전처리 및 가공
f) 데이터베이스에 처리된 데이터 업로드
g) 파일 정리 및 마무리
주요 기능:

Dell의 회계연도 계산: 2월 첫 번째 토요일부터 시작
주(Week) 계산: 토요일부터 금요일까지
분기 계산
주문 유형 매핑
결측값 처리
Count_PO 계산: 각 Cust_Sys_No별 총 주문 라인 수 계산


개선된 특징:

모듈화된 구조
강화된 에러 처리 및 로깅
웹 크롤링 재시도 메커니즘
설정 정보 중앙화
타입 힌팅 사용
체계적인 로깅



이 시스템은 Python, Selenium, pandas, MySQL을 주로 사용하며, Dell의 특정 웹사이트에서 리포트를 다운로드하고 처리하는 것에 특화되어 있습니다.

==================================================================================================
프로세스 설명

프로세스 설명:

초기화 및 설정:

config.py에서 설정을 로드합니다.
필요한 폴더(다운로드, 완료)를 확인하고 생성합니다.


사용자 입력:

사용자로부터 시작 날짜와 종료 날짜를 입력받습니다.


웹 크롤링:

WebCrawler 클래스를 초기화하고 웹사이트에 로그인합니다.
리포트 검색 페이지로 이동하여 지정된 날짜 범위의 리포트를 다운로드합니다.


파일 처리:

다운로드된 파일을 감지하고 이름을 변경합니다.


데이터 처리:

다운로드된 엑셀 파일을 pandas DataFrame으로 읽어들입니다.
DataProcessor 클래스를 사용하여 데이터를 처리합니다:
a) 열 이름을 변경합니다.
b) 데이터 타입을 변환합니다.
c) Dell의 회계 연도, 주, 분기를 계산합니다:

회계 연도는 2월 첫 번째 토요일에 시작합니다.
주(Week)는 토요일부터 금요일까지로 계산합니다.
FY와 Week는 각각 "FYxx"와 "WKxx" 형식으로 표시합니다.
d) 주문 유형을 매핑합니다.
e) 결측값을 처리합니다.
f) Count_PO를 계산합니다:
각 Cust_Sys_No에 대해 데이터프레임에 나타나는 모든 행의 수를 계산합니다.
같은 Cust_Sys_No를 가진 모든 행에 동일한 Count_PO 값을 할당합니다.




데이터베이스 작업:

필요한 테이블을 생성하고 처리된 데이터를 MySQL 데이터베이스에 업로드합니다.


파일 정리:

처리가 완료된 파일을 완료 폴더로 이동합니다.


마무리:

웹 크롤러를 종료하고 처리 결과를 로그에 기록합니다.