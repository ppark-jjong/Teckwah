        raw_data_file = "C:/MyMain/Test/3.012_CS_Receiving_TAT_Report_accumulated.xlsb"


 현재 코드 구조

config.py: 설정 정보를 저장
database.py: 데이터베이스 관련 기능
web_crawler.py: 웹 크롤링 관련 기능
data_processor.py: 데이터 처리 관련 기능
file_handler.py: 파일 처리 관련 기능
main.py: 메인 실행 스크립트
login_crawling.py : 크롤링을 위한 처리 관련 기능


주당 100KB 기준 연간 데이터 양:

1년 = 52주
연간 데이터 양 = 100KB * 52 = 5,200KB ≈ 5.08MB


Dashboard_raw Data 분석:

현재 크기: 21,000KB ≈ 20.5MB
기간: 2023년 3월 ~ 2024년 5월 (약 14개월)
월평균 데이터 양: 20.5MB / 14 ≈ 1.46MB/월
분기별 데이터 양: 1.46MB * 3 ≈ 4.38MB/분기


DB 전환 시 데이터 압축:

일반적으로 엑셀에서 정규화된 DB로 전환 시 30-50% 정도 데이터 크기가 줄어들 수 있습니다.
보수적으로 30% 압축을 가정하면:

분기별 데이터 양: 4.38MB * 0.7 ≈ 3.07MB/분기
연간 데이터 양: 3.07MB * 4 ≈ 12.28MB/년

============================================================================================
데이터베이스 연산 최적화:

대량 삽입 시 executemany() 메서드를 사용하고 있지만, 더 큰 데이터셋의 경우 LOAD DATA INFILE 명령을 고려해볼 수 있습니다.
인덱스 추가를 고려하여 쿼리 성능을 개선할 수 있습니다.


에러 처리 및 로깅 개선:

현재 예외 처리가 일관적이지 않습니다. 전역적인 예외 처리 전략을 수립하고 적용해야 합니다.
로깅을 더 체계적으로 구현하여 문제 해결과 모니터링을 용이하게 할 수 있습니다.


비동기 처리 도입:

파일 다운로드나 데이터베이스 연산 등 I/O 작업에 비동기 처리를 도입하여 전체적인 성능을 개선할 수 있습니다.


코드 구조 개선:

일부 함수들(예: process_dataframe)이 너무 길고 복잡합니다. 이를 더 작고 관리하기 쉬운 함수들로 분리할 수 있습니다.
클래스를 도입하여 관련 기능을 그룹화하고 상태 관리를 개선할 수 있습니다.


설정 관리 개선:

하드코딩된 값들을 설정 파일로 이동시켜 관리를 용이하게 할 수 있습니다.


테스트 코드 추가:

단위 테스트와 통합 테스트를 추가하여 코드의 안정성을 높일 수 있습니다.


타입 힌팅 도입:

타입 힌팅을 사용하여 코드의 가독성과 유지보수성을 향상시킬 수 있습니다.


병렬 처리 고려:

대량의 데이터 처리 시 멀티프로세싱이나 멀티스레딩을 고려해볼 수 있습니다.


웹 크롤링 안정성 개선:

더 강력한 대기 전략과 재시도 메커니즘을 구현하여 웹 크롤링의 안정성을 높일 수 있습니다.


데이터 검증 강화:

입력 데이터와 처리된 데이터에 대한 검증 로직을 추가하여 데이터 무결성을 보장할 수 있습니다.


코드 중복 제거:

유사한 기능을 하는 코드 블록들을 공통 함수로 추출하여 중복을 제거할 수 있습니다.


의존성 주입 고려:

하드코딩된 의존성들을 제거하고 의존성 주입 패턴을 적용하여 유연성과 테스트 용이성을 높일 수 있습니다.