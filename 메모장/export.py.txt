import logging
import os
import pandas as pd
from datetime import datetime
from config import COMPLETE_FOLDER
from database import get_data_by_inventory_date
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter

# 로깅 설정
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    filename="extract_data.log",
    filemode="a",
)
logger = logging.getLogger(__name__)

# 콘솔에 로그 출력을 위한 핸들러 추가
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)


def get_user_input() -> tuple:
    while True:
        try:
            start_date = input("시작 날짜를 입력하세요 (YYYY-MM-DD): ")
            end_date = input("종료 날짜를 입력하세요 (YYYY-MM-DD): ")
            datetime.strptime(start_date, "%Y-%m-%d")
            datetime.strptime(end_date, "%Y-%m-%d")
            logger.info(f"입력된 날짜: {start_date}부터 {end_date}까지")
            return start_date, end_date
        except ValueError:
            logger.error(
                "잘못된 날짜 형식입니다. YYYY-MM-DD 형식으로 다시 입력해주세요."
            )
            print("잘못된 날짜 형식입니다. YYYY-MM-DD 형식으로 다시 입력해주세요.")


def preprocess_extracted_data(df: pd.DataFrame) -> pd.DataFrame:
    logger.info("추출된 데이터 전처리 시작")
    df.columns = df.columns.str.replace(" ", "_").str.lower()
    date_columns = ["putawaydate", "inventorydate"]
    for col in date_columns:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], errors="coerce")

    # count_po 처리: null이 아닌 값을 1로, null인 값을 0으로 변경
    if "count_po" in df.columns:
        df["count_po"] = df["count_po"].notnull().astype(int)

    # quantity 처리
    if "quantity" in df.columns:
        df["quantity"] = pd.to_numeric(df["quantity"], errors="coerce").fillna(0)

    logger.info("데이터 전처리 완료")
    return df


def adjust_column_width(worksheet):
    for column in worksheet.columns:
        max_length = 0
        column_letter = get_column_letter(column[0].column)
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = max_length + 2
        worksheet.column_dimensions[column_letter].width = adjusted_width


def analyze_data(df: pd.DataFrame) -> dict:
    weekly_analysis = (
        df.groupby(["week", "edi_order_type"])
        .agg(
            {
                "count_po": "sum",
                "quantity": "sum",
            }
        )
        .reset_index()
    )
    logger.info("주차별 데이터 분석 완료")

    shipto_analysis = (
        df.groupby(["shiptocode", "edi_order_type"])
        .agg(
            {
                "count_po": "sum",
                "quantity": "sum",
            }
        )
        .reset_index()
    )
    logger.info("분야별 데이터 분석 완료")

    return {"weekly_analysis": weekly_analysis, "shipto_analysis": shipto_analysis}


def save_to_excel(data: dict, filename: str):
    """
    분석된 데이터를 엑셀 파일로 저장하는 함수
    :param data: 저장할 데이터 딕셔너리
    :param filename: 저장할 파일 이름
    """
    file_path = os.path.join(COMPLETE_FOLDER, filename)

    # Full Data 컬럼 순서 지정
    full_data_columns = [
        "receiptno",
        "replen_balance_order",
        "cust_sys_no",
        "allocated_part",
        "edi_order_type",
        "shipfromcode",
        "shiptocode",
        "country",
        "quantity",
        "putawaydate",
        "inventorydate",
        "fy",
        "quarter",
        "month",
        "week",
        "ordertype",
        "count_po",
    ]

    # 데이터를 엑셀 파일로 저장
    with pd.ExcelWriter(file_path, engine="openpyxl") as writer:
        logger.info("전체 데이터를 Excel 파일로 저장 중")
        data["full_data"][full_data_columns].to_excel(
            writer, sheet_name="Full_Data", index=False
        )

        logger.info("Summary 데이터를 Excel 파일로 저장 중")

        # Weekly Analysis 데이터 쓰기
        data["weekly_analysis"].to_excel(
            writer, sheet_name="Summary", index=False, startrow=1, startcol=0
        )

        # ShipTo Analysis 데이터 쓰기
        shipto_start_col = len(data["weekly_analysis"].columns) + 2  # 2칸 간격
        data["shipto_analysis"].to_excel(
            writer,
            sheet_name="Summary",
            index=False,
            startrow=1,
            startcol=shipto_start_col,
        )

    # 저장된 파일을 다시 열어 제목 추가 및 열 너비 조정
    workbook = load_workbook(file_path)
    summary_sheet = workbook["Summary"]

    # 제목 추가
    summary_sheet.cell(row=1, column=1, value="Weekly Analysis")
    summary_sheet.cell(row=1, column=shipto_start_col + 1, value="ShipTo Analysis")

    # 열 너비 조정
    for sheet in workbook.worksheets:
        adjust_column_width(sheet)

    # 변경사항 저장
    workbook.save(file_path)
    logger.info(f"데이터가 Excel 파일로 저장되었습니다: {file_path}")


def main():
    start_date, end_date = get_user_input()

    start_date = datetime.strptime(start_date, "%Y-%m-%d")
    end_date = datetime.strptime(end_date, "%Y-%m-%d")
    logger.info(f"날짜 변환 완료: {start_date}부터 {end_date}까지")

    logger.info(
        f"데이터베이스에서 {start_date.date()}부터 {end_date.date()}까지의 데이터를 추출 중"
    )
    df = get_data_by_inventory_date(start_date, end_date)
    logger.info(f"데이터베이스에서 {len(df)}개의 데이터를 추출 완료")

    if not df.empty:
        df = preprocess_extracted_data(df)

        logger.info("데이터 분석 시작")
        analysis_results = analyze_data(df)
        logger.info("데이터 분석 완료")

        filename = f"{start_date.strftime('%Y%m%d')}-{end_date.strftime('%Y%m%d')}_ReceivingTAT_analysis.xlsx"

        data_to_save = {
            "full_data": df,
            "weekly_analysis": analysis_results["weekly_analysis"],
            "shipto_analysis": analysis_results["shipto_analysis"],
        }

        logger.info("Excel 파일 생성 시작")
        save_to_excel(data_to_save, filename)
        logger.info("Excel 파일 생성 완료")

    else:
        logger.info("지정된 날짜 범위에 해당하는 데이터가 없습니다")

    logger.info("프로그램 종료")


if __name__ == "__main__":
    main()
